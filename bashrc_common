export HISTTIMEFORMAT="%F %T "
 # Have history update from all sessions and be immediately available
 HISTSIZE=5000
 HISTFILESIZE=10000
 shopt -s histappend
 export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=
############ Common functions ########################## 
bkres() {
        name="$(cut -d'/' -f4-<<<"$PWD")"
        mkdir -p ~/results/${name}/
        cp $1 ~/results/${name}/elements.dat
}

mkcd() {
        mkdir "$1"; cd "$1";
}

dtfromsec(){
        date -u -d @${1} +"%D-%T"
}
Log() {
     touch ~/log.log
     echo [`date -u +%Y-%m-%d\ T\ %H:%M:%S\ Z`] $* | cat - ~/log.log > temp && mv temp ~/log.log
}

log() {
     touch log.log
     echo [`date -u +%Y-%m-%d\ T\ %H:%M:%S\ Z`] $* | cat - log.log > temp && mv temp log.log
}

extract () {
     if [ -f $1 ] ; then
         case $1 in
             *.tar.bz2)   tar xjf $1     ;;
             *.tar.gz)    tar xzf $1     ;;
             *.bz2)       bunzip2 $1     ;;
             *.rar)       rar x $1       ;;
             *.gz)        gunzip $1      ;;
             *.tar)       tar xf $1      ;;
             *.tbz2)      tar xjf $1     ;;
             *.tgz)       tar xzf $1     ;;
             *.zip)       unzip $1       ;;
             *.Z)         uncompress $1  ;;
             *.7z)        7z x $1    ;;
             *)           echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

#mksof()	{
#	mkdir $1;
#	cp install_template.sh "$1"/install.sh;
#}

assign_hostname() {
  if [[ "$HOSTNAME" == *"bessemer"* ]]; then
    hostname="bessemer"
  elif [[ "$HOSTNAME" == *"stanage"* ]]; then
    hostname="stanage"
  elif [[ "$HOSTNAME" == *"sharc"* ]]; then
    hostname="sharc"
  else
    hostname="unknown"
  fi
  echo $hostname
}
# call the function
assign_hostname

checksum() {
  for file in "$@"
  do
    if [ -f "$file" ]; then
      printf "%s:\n" "$file"
      md5=$(md5sum "$file" | awk '{ print $1 }')
      sha1=$(sha1sum "$file" | awk '{ print $1 }')
      sha256=$(sha256sum "$file" | awk '{ print $1 }')
      printf "  md5: %s\n  sha1: %s\n  sha256: %s\n" "$md5" "$sha1" "$sha256"
    else
      echo "File not found: $file"
    fi
  done
}

ssh-key-rhost-scan() {
    ssh-keygen -lf <(ssh-keyscan "$1" 2>/dev/null)
}

ssl-cert-summary() {
    if [[ $# -eq 0 ]]; then
        echo "Usage: ssl-cert-summary <cert_file> [<cert_file2> ...]"
    else
        for cert_file in "$@"; do
            if [[ ! -f "$cert_file" ]]; then
                echo "Error: '$cert_file' is not a valid certificate file."
                continue
            fi

            echo "Certificate file: $cert_file"
            echo "---------------------------------------"
            start_date=$(openssl x509 -startdate -noout -in "$cert_file" | awk -F= '{print $2}' | xargs -I{} date -d {} '+%Y-%m-%d')
            end_date=$(openssl x509 -enddate -noout -in "$cert_file" | awk -F= '{print $2}' | xargs -I{} date -d {} '+%Y-%m-%d')
            cn=$(openssl x509 -noout -subject -in "$cert_file" | sed 's/.*CN=\([^\/]*\).*/\1/g')
            sans=$(openssl x509 -noout -text -in "$cert_file" | awk '/DNS:/ {split($0, a, "DNS:"); for (i=2; i<=length(a); i++) {print a[i]}}')
            issuer=$(openssl x509 -noout -issuer -in "$cert_file" | sed 's/.*CN=\([^\/]*\).*/\1/g')
            fingerprint=$(openssl x509 -noout -fingerprint -sha256 -in "$cert_file" | awk -F= '{print $2}' | sed 's/://g')
            key_size=$(openssl x509 -noout -text -in "$cert_file" | awk '/Public-Key:/ {print $2}')
            key_type=$(openssl x509 -noout -text -in "$cert_file" | awk '/Public-Key:/ {print $3}')

            echo "Certificate start date: $start_date"
            echo "Certificate end date: $end_date"
            echo "Common name: $cn"
            if [[ -n "$sans" ]]; then
                echo "Subject alternative names: $sans"
            fi
            echo "Issuer: $issuer"
            echo "SHA-256 fingerprint: $fingerprint"
            echo "Public key size: $key_size"
            echo "Public key type: $key_type"
            echo "---------------------------------------"
        done
    fi
}

list-users() {
    if [[ $# -eq 1 ]]; then
        getent group "$1" | awk -F: '{print $4}' | tr ',' '\n'
    else
        getent passwd | cut -d: -f1,4 | while read -r line; do
            user=$(echo "$line" | cut -d: -f1)
            groups=$(id -Gn "$user" | tr ' ' ',')
            echo "$user [$groups]"
        done
    fi
}

port-check() {
    if [[ $# -lt 1 ]]; then
        echo "Usage: port-check [hostname] port1 [port2 ...]"
        return 1
    fi
    
    local host="$1"
    shift

    if [[ $# -eq 0 ]]; then
        ports=(
            80:"HTTP"
            443:"HTTPS"
            22:"SSH"
            25:"SMTP"
            143:"IMAP"
            993:"IMAPS"
            110:"POP3"
            995:"POP3S"
            3306:"MySQL"
            5432:"PostgreSQL"
        )
    else
        ports=("$@")
    fi

    for port in "${ports[@]}"; do
        if [[ "$port" =~ ^[0-9]+$ ]]; then
            description=""
        else
            description="(${port#*:})"
            port="${port%%:*}"
        fi
        (echo >/dev/tcp/"$host"/"$port") &>/dev/null && echo "Port $port is open $description" || echo "Port $port is closed $description"
    done
}

find-largest-files() {
    if [[ $# -ne 1 ]]; then
        echo "Usage: find-largest-files <directory>"
    else
        largest=$(find "$1" -type f -printf '%s\n' | sort -rn | head -1)
        if (( largest < 1024 )); then
            unit="B"
            divisor=1
        elif (( largest < 1048576 )); then
            unit="KB"
            divisor=1024
        elif (( largest < 1073741824 )); then
            unit="MB"
            divisor=1048576
        else
            unit="GB"
            divisor=1073741824
        fi
        find "$1" -type f -printf '%s %p\n' | sort -rn | head -20 | awk -v unit="$unit" -v divisor="$divisor" '{ printf "%.2f%s\t%s\n", $1/divisor, unit, $2 }'
    fi
}

dnslookup() {
  dig +short "$1"
}

watchlog() {
  tail -f "$1" | grep --color=always "$2"
}

sysinfo() {
  echo "OS version: $(lsb_release -d | awk '{print $2,$3,$4}')"
  echo "Kernel version: $(uname -r)"
  echo "CPU usage: $(top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4}')%"
  echo "Memory usage: $(free -m | awk 'NR==2{printf "%.2f%%", $3/$2*100}')"
  echo ""
  echo "Top 5 processes by CPU usage:"
  ps aux --sort=-%cpu | head -6
  echo ""
  echo "Top 5 processes by memory usage:"
  ps aux --sort=-%mem | head -6
}
