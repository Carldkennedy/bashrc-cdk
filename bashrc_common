#!/bin/bash
[ -f ~/.fzf.bash ] && source ~/.fzf.bash
export MANPATH=$MANPATH:~/.fzf/man
## History
export HISTTIMEFORMAT="%F %T "
 HISTSIZE=5000
 HISTFILESIZE=10000
# Have history update from all sessions and be immediately available
# Avoid duplicates
HISTCONTROL=ignoredups:erasedups
# When the shell exits, append to the history file instead of overwriting it
shopt -s histappend
# After each command, append to the history file and reread it
PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a; history -c; history -r"
export VIMINIT="source ~/bashrc-cdk/vimrc"
export EDITOR=vim
export GPG_TTY=$(tty)
export SQUEUE_FORMAT="%.7i %.9P %.4q %.8Q %.25j %.8u %.2t %.6D %16R %5C %10m %%.9M %11l %11L %13b %80Z" 
export SACCT_FORMAT="JobID,CPUTime%16,ExitCode,JobName%30,MaxRSS,MaxVMSize,MaxDiskRead,MaxDiskWrite,ReqCPUS,ReqMem,ReqNodes,NNodes,NodeList,State,Start,End,Elaps,QOS,WorkDir%80"
PATH="$PATH:$HOME/bashrc-cdk/bin/.local/scripts"
# vi-style key bindings on command line 
set -o vi
# custom key bindings
source ~/bashrc-cdk/custom_bindings.sh
# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=
############ Common functions ########################## 
bashupd() {
	source ~/bashrc-cdk/bash-setup.sh && source ~/.bashrc
}

cs() {
     curl cheat.sh/${1}
}

bkres() {
        name="$(cut -d'/' -f4-<<<"$PWD")"
        mkdir -p ~/results/"${name}"/
        cp "$1" ~/results/"${name}"/elements.dat
}

to_lowercase() {
    echo "$1" | tr '[:upper:]' '[:lower:]'
}

mkcd() {
        mkdir -p "$1"; cd "$1";
}

dtfromsec(){
        date -u -d @${1} +"%D-%T"
}

fetchFromHome(){
	find ~/ -maxdepth 1 -mmin -$1 -type f -exec mv {} $(pwd) \;
}
Log() {
     touch ~/log.log
     echo [`date -u +%Y-%m-%d\ T\ %H:%M:%S\ Z`] $* | cat - ~/log.log > temp && mv temp ~/log.log
}

log() {
     touch log.log
     echo [`date -u +%Y-%m-%d\ T\ %H:%M:%S\ Z`] $* | cat - log.log > temp && mv temp log.log
}

extract () {
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2)   echo "tar xjf '$1'"; tar xjf "$1"     ;;
            *.tar.gz)    echo "tar xzf '$1'"; tar xzf "$1"     ;;
            *.bz2)       echo "bunzip2 '$1'"; bunzip2 "$1"     ;;
            *.rar)       echo "rar x '$1'"; rar x "$1"       ;;
            *.gz)        echo "gunzip '$1'"; gunzip "$1"      ;;
            *.tar)       echo "tar xf '$1'"; tar xf "$1"      ;;
            *.tbz2)      echo "tar xjf '$1'"; tar xjf "$1"     ;;
            *.tgz)       echo "tar xzf '$1'"; tar xzf "$1"     ;;
            *.zip)       echo "unzip '$1'"; unzip "$1"       ;;
            *.Z)         echo "uncompress '$1'"; uncompress "$1"  ;;
            *.7z)        echo "7z x '$1'"; 7z x "$1"        ;;
            *)           echo "'$1' cannot be extracted via extract" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}


# Get the most recent commit date, commit hash, and commit message for each branch, as well as the branch name
# and the hash of the merge base between the branch and main
getBranchCommits() {
    # Use `git for-each-ref` to get information for each branch
    git for-each-ref --shell --format \
        # For each branch, run a `git log` command to get the most recent commit information
        "git --no-pager log -1 --date=iso --format='%%ad '%(align:left,55)%(refname:short)%(end)' %%h %%s' \$(git merge-base %(refname:short) main);" \
        refs/heads
}

# Sort the output of `getBranchCommits` by commit date
sortBranchCommits() {
    # Call `getBranchCommits` and pipe the output to `sort`
    getBranchCommits | sort
}

# Define an alias `gitd` to print a table of the most recent commit information for each branch
alias gitd='sortBranchCommits'


assign_hostname() {
  if [[ "$HOSTNAME" == *"bessemer"* ]]; then
    hostname="bessemer"
  elif [[ "$HOSTNAME" == *"stanage"* ]]; then
    hostname="stanage"
  elif [[ "$HOSTNAME" == *"sharc"* ]]; then
    hostname="sharc"
  else
    hostname="unknown"
  fi
  echo $hostname
}
# call the function
assign_hostname

checksum() {
  for file in "$@"
  do
    if [ -f "$file" ]; then
      printf "%s:\n" "$file"
      md5=$(md5sum "$file" | awk '{ print $1 }')
      sha1=$(sha1sum "$file" | awk '{ print $1 }')
      sha256=$(sha256sum "$file" | awk '{ print $1 }')
      printf "  md5: %s\n  sha1: %s\n  sha256: %s\n" "$md5" "$sha1" "$sha256"
    else
      echo "File not found: $file"
    fi
  done
}

ssh-key-rhost-scan() {
    ssh-keygen -lf <(ssh-keyscan "$1" 2>/dev/null)
}

ssl-cert-summary() {
    if [[ $# -eq 0 ]]; then
        echo "Usage: ssl-cert-summary <cert_file> [<cert_file2> ...]"
    else
        for cert_file in "$@"; do
            if [[ ! -f "$cert_file" ]]; then
                echo "Error: '$cert_file' is not a valid certificate file."
                continue
            fi

            echo "Certificate file: $cert_file"
            echo "---------------------------------------"
            start_date=$(openssl x509 -startdate -noout -in "$cert_file" | awk -F= '{print $2}' | xargs -I{} date -d {} '+%Y-%m-%d')
            end_date=$(openssl x509 -enddate -noout -in "$cert_file" | awk -F= '{print $2}' | xargs -I{} date -d {} '+%Y-%m-%d')
            cn=$(openssl x509 -noout -subject -in "$cert_file" | sed 's/.*CN=\([^\/]*\).*/\1/g')
            sans=$(openssl x509 -noout -text -in "$cert_file" | awk '/DNS:/ {split($0, a, "DNS:"); for (i=2; i<=length(a); i++) {print a[i]}}')
            issuer=$(openssl x509 -noout -issuer -in "$cert_file" | sed 's/.*CN=\([^\/]*\).*/\1/g')
            fingerprint=$(openssl x509 -noout -fingerprint -sha256 -in "$cert_file" | awk -F= '{print $2}' | sed 's/://g')
            key_size=$(openssl x509 -noout -text -in "$cert_file" | awk '/Public-Key:/ {print $2}')
            key_type=$(openssl x509 -noout -text -in "$cert_file" | awk '/Public-Key:/ {print $3}')

            echo "Certificate start date: $start_date"
            echo "Certificate end date: $end_date"
            echo "Common name: $cn"
            if [[ -n "$sans" ]]; then
                echo "Subject alternative names: $sans"
            fi
            echo "Issuer: $issuer"
            echo "SHA-256 fingerprint: $fingerprint"
            echo "Public key size: $key_size"
            echo "Public key type: $key_type"
            echo "---------------------------------------"
        done
    fi
}

list-users() {
    if [[ $# -eq 1 ]]; then
        getent group "$1" | awk -F: '{print $4}' | tr ',' '\n'
    else
        getent passwd | cut -d: -f1,4 | while read -r line; do
            user=$(echo "$line" | cut -d: -f1)
            groups=$(id -Gn "$user" | tr ' ' ',')
            echo "$user [$groups]"
        done
    fi
}

port-check() {
    if [[ $# -lt 1 ]]; then
        echo "Usage: port-check [hostname] port1 [port2 ...]"
        return 1
    fi
    
    local host="$1"
    shift

    if [[ $# -eq 0 ]]; then
        ports=(
            80:"HTTP"
            443:"HTTPS"
            22:"SSH"
            25:"SMTP"
            143:"IMAP"
            993:"IMAPS"
            110:"POP3"
            995:"POP3S"
            3306:"MySQL"
            5432:"PostgreSQL"
        )
    else
        ports=("$@")
    fi

    for port in "${ports[@]}"; do
        if [[ "$port" =~ ^[0-9]+$ ]]; then
            description=""
        else
            description="(${port#*:})"
            port="${port%%:*}"
        fi
        (echo >/dev/tcp/"$host"/"$port") &>/dev/null && echo "Port $port is open $description" || echo "Port $port is closed $description"
    done
}

find-largest-files() {
    if [[ $# -ne 1 ]]; then
        echo "Usage: find-largest-files <directory>"
    else
        largest=$(find "$1" -type f -printf '%s\n' | sort -rn | head -1)
        if (( largest < 1024 )); then
            unit="B"
            divisor=1
        elif (( largest < 1048576 )); then
            unit="KB"
            divisor=1024
        elif (( largest < 1073741824 )); then
            unit="MB"
            divisor=1048576
        else
            unit="GB"
            divisor=1073741824
        fi
        find "$1" -type f -printf '%s %p\n' | sort -rn | head -20 | awk -v unit="$unit" -v divisor="$divisor" '{ printf "%.2f%s\t%s\n", $1/divisor, unit, $2 }'
    fi
}

dnslookup() {
  dig +short "$1"
}

watchlog() {
  tail -f "$1" | grep --color=always "$2"
}

sysinfo() {
  echo "OS version: $(lsb_release -d | awk '{print $2,$3,$4}')"
  echo "Kernel version: $(uname -r)"
  echo "CPU usage: $(top -bn1 | grep "Cpu(s)" | awk '{print $2 + $4}')%"
  echo "Memory usage: $(free -m | awk 'NR==2{printf "%.2f%%", $3/$2*100}')"
  echo ""
  echo "Top 5 processes by CPU usage:"
  ps aux --sort=-%cpu | head -6
  echo ""
  echo "Top 5 processes by memory usage:"
  ps aux --sort=-%mem | head -6
}

easyconfig_dependency_tree() {
    if [ $# -ne 1 ]; then
        echo "Usage: easyconfig_dependency_tree <easyconfig_file>"
        return 1
    fi

    local easyconfig_file="$EASYBUILD_ROBOT_PATHS/$1"

    if [ ! -f "$easyconfig_file" ]; then
        echo "File not found: $easyconfig_file"
        return 1
    fi

    _print_dependency_tree() {
        local file="$1"
        local prefix="${2:-}"

        local toolchain=$(grep "^ *toolchain" "$file" | grep -oP '\{\K[^\}]+')
        local toolchain_name=$(echo $toolchain | awk -F',' '{print $1}' | awk -F':' '{print $2}' | tr -d ' ')
        local toolchain_version=$(echo $toolchain | awk -F',' '{print $2}' | awk -F':' '{print $2}' | tr -d ' ')

        local dependencies=$(grep "^ *dependencies" "$file" | grep -oP '\[\K[^\]]+')
        dependencies=$(echo $dependencies | sed -e 's/[()]//g' -e 's/"//g' -e 's/,/ /g')

        for dep in $dependencies; do
            echo "${prefix}$dep"
            local dep_name=$(echo $dep | awk -F',' '{print $1}')
            local dep_version=$(echo $dep | awk -F',' '{print $2}')
            local dep_name_lc=$(echo $dep_name | tr '[:upper:]' '[:lower:]')
            local dep_version_underscored=$(echo $dep_version | tr '.' '_')
            local dep_easyconfig_file=$(find $EASYBUILD_ROBOT_PATHS -type f -name "${dep_name_lc}-${dep_version_underscored}-${toolchain_name}${toolchain_version}.eb" -print -quit)
            if [ ! -z "$dep_easyconfig_file" ]; then
                _print_dependency_tree "$dep_easyconfig_file" "$prefix  "
            fi
        done
    }

    echo "Dependency tree for $easyconfig_file:"
    _print_dependency_tree "$easyconfig_file"
}

git_add_commit() {
    if [ $# -ne 2 ]; then
        echo "Usage: git_add_commit <file> <commit_message>"
        return 1
    fi

    local filename="$1"
    local commit_message="$2"

    git add "$filename" && git commit -m "$commit_message"
}

grepr() {
    local exclude_dirs=""
    if [[ -f ".exclude_dirs" ]]; then
        while IFS= read -r line; do
            exclude_dirs+="--exclude-dir=$line "
        done < .exclude_dirs
    fi
    grep -r $exclude_dirs "$@"
}

vline() {
    local file line
    file=$(echo $1 | cut -d ':' -f 1)
    line=$(echo $1 | cut -d ':' -f 2)
    vim "+$line" $file
}

fzg() {
   git grep --line-number . | fzf --delimiter : --nth 3.. --bind "enter:become(vim {1} +{2})"
}

fzge() {
    local exclude_dirs=""
    if [[ -f ".exclude_dirs" ]]; then
        exclude_dirs=$(awk '{print "--exclude-dir=" $0}' .exclude_dirs)
    fi
    git grep --line-number . | grep -vFf <(echo "$exclude_dirs") | fzf --delimiter : --nth 3.. --bind "enter:become(vim {1} +{2})"
}

fzv() {
  fzf --bind "enter:execute(vim {})"
}

fzps() {
  ps aux | { read -r line; echo "$line"; sort -nrk 3,3; } | \
    fzf --header "Press CTRL-R to reload $line" \
        --bind "ctrl-r:reload(ps aux | { read -r line; echo \"\$line\"; sort -nrk 3,3; })" \
        --header-lines=1 --height=50% --layout=reverse
}

bk() {
    if [ -f "$1.bk" ]; then
        echo "diff $1 ${1}.bk" 
        diff $1 ${1}.bk
        read -p "Backup file $1.bk already exists. Do you want to overwrite it? (y/n): " confirm
        if [[ "$confirm" != [yY] ]]; then
            echo "Backup not overwritten."
            return
        fi
    fi
    cp "$1" "$1.bk"
    echo "Backed up file $1"
}

if tmux -V | grep -qE "^[2-9]\."; then
  if [ ! -d ~/.tmux/plugins/tpm ]; then
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  fi
fi

