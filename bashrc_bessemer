sacctu() {
            sacct --user="$1" --format=Account,AveCPU,AveRSS,AveVMSize,CPUTime,Elapsed,ExitCode,JobID,JobName,MaxRSS,MaxVMSize,MaxDiskRead,MaxDiskWrite,ReqCPUS,ReqMem,ReqNodes,NCPUS,NNodes;
 }

sstatu() {
            sstat --jobs="$1" --format=AveCPU,AveRSS,AveVMSize,JobID,MaxRSS,MaxVMSize,NTasks;
 }
 
jobinfo() {
    echo -e "\n###################### Failed jobs scripts ####################### \n"
    sacct --format="JobID,JobName%50,State,ExitCode,Start,End" --state=FAILED -j $1
    echo -e "\n########################### In queue ############################# \n"
    squeue -j $1
    echo -e "\n########################## Finished job ########################## \n"
    sacct --format="JobID,JobName%50,State,ExitCode,Start,End" --state=COMPLETED -j $1
    echo -e "\n########################## Scontrol job ########################## \n"
    scontrol show job $1
}

userinfo() {
    clear
    echo -e "\n##################### Recently finished jobs ###################### \n"
    sacct -u $1 --format=JobID,JobName,Partition,AllocCPUS,State,ExitCode,Start,End,Elapsed

    echo -e "\n############################ CANCELLED ############################ \n"
    sacct -u $1 --state CANCELLED --format=JobID,JobName,Partition,AllocCPUS,State,ExitCode,Start,End,Elapsed

    echo -e "\n########################### Processes ############################# \n" 
    ps aux | grep $1

    echo -e "\n############################# squeue ############################## \n"
    squeue -u $1

    eval df -h "~$1"
}

ml() {
  if [ $# -eq 0 ]; then
    module list
  else
    module load "$1"
  fi
}

#Bess
modep2() { 
    if [[ $# -eq 0 ]]; then 
        echo "Usage: modep <module_name>. This function is case sensitive!"
    else
        modules=($(module -t avail 2>&1 $1)) 
        for module in "${modules[@]}"; do 

            num_slashes=$(echo "$module" | tr -dc '/' | wc -c) 
            if [[ "$num_slashes" -ge 6 ]]; then 
                search_dir="$(echo "$module" | cut -d/ -f1-6)" 
            else
                                if [[ "$num_slashes" == 5 ]]; then
                                        continue
                                else
                                        echo "$module" # Print the module name
                                        modepx "$module" "$search_dir" 
                                fi
            fi
        done
    fi
}

modepx() { 
    deps=($(grep -rl "^    module load ${1}" "${2}/" | awk -F"/" '{printf("%s/%s\n", $(NF-1), $NF)}' | sed 's|^/||')) 
    if [[ -n "$3" ]]; then 
        color=$((31 + $3 % 7)) 
    else
        color=31 
    fi
    for dep in "${deps[@]}"; do 
        if [[ "$dep" == *.bak* ]]; then 
            continue 
        fi
        dir=$(dirname "$dep") 
        file=$(basename "$dep") 
        echo -e " \e[${color}m$dir/$file\e[0m" 
        modepx "$dir/$file" "$2" $((color + 1)) 
    done
}

# This function takes the name of a module as input argument and displays its dependencies recursively.
moduleDependencies() { 
    # Check if module name is provided as input argument
    if [[ $# -eq 0 ]]; then 
        # Display usage if no module name is provided
        echo "Usage: moduleDependencies <moduleName>. This function is case sensitive!"
    else
        # Retrieve available modules using `module` command and loop over each of them
        modules=($(module -t avail 2>&1 $1)) 
        for module in "${modules[@]}"; do 
            # Get the number of slashes in the module name
            num_slashes=$(echo "$module" | tr -dc '/' | wc -c) 
            # Set search directory as the first 6 directories in the module path if number of slashes is greater than or equal to 6
            if [[ "$num_slashes" -ge 6 ]]; then 
                search_dir="$(echo "$module" | cut -d/ -f1-6)" 
            # Skip the module if number of slashes is 5
            else
                if [[ "$num_slashes" == 5 ]]; then
                    continue
                # If number of slashes is less than 5, print the module name and recursively call the second function `moduleDependenciesRecursive`
                else
                    echo "$module" # Print the module name
                    moduleDependenciesRecursive "$module" "$search_dir" 
                fi
            fi
        done
    fi
}

# This function takes the name of a module and a search directory as input arguments and recursively displays its dependencies.
moduleDependenciesRecursive() { 
    # Search for files that load the given module using `grep` command, and extract the corresponding directory and file names using `awk` and `sed`
    dependencies=($(grep -rl "^    module load ${1}" "${2}/" | awk -F"/" '{printf("%s/%s\n", $(NF-1), $NF)}' | sed 's|^/||')) 
    # Set the color of the output based on the depth in the dependency tree
    if [[ -n "$3" ]]; then 
        color=$((31 + $3 % 7)) 
    else
        color=31 
    fi
    # Loop over each dependency, print it with a color, and recursively call this function with the dependency file and directory as input arguments, along with an incremented color value.
    for dependency in "${dependencies[@]}"; do 
        # Skip files with `.bak` extension
        if [[ "$dependency" == *.bak* ]]; then 
            continue 
        fi
        directory=$(dirname "$dependency") 
        file=$(basename "$dependency") 
        echo -e " \e[${color}m$directory/$file\e[0m" 
        moduleDependenciesRecursive "$directory/$file" "$2" $((color + 1)) 
    done
}
alias modep="moduleDependencies"

